"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[595],{8453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>a});var o=s(6540);const t={},i=o.createContext(t);function r(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),o.createElement(i.Provider,{value:n},e.children)}},9094:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"module-2/extension-config","title":"Extension Config","description":"\ud83c\udfaf Goal","source":"@site/docs/module-2/1-extension-config.md","sourceDirName":"module-2","slug":"/module-2/extension-config","permalink":"/simple-looker-extension-elevate-25/docs/module-2/extension-config","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Module 2: Looker Components and Configuration","permalink":"/simple-looker-extension-elevate-25/docs/module-2/overview"},"next":{"title":"Tabs and Dashboard Switching","permalink":"/simple-looker-extension-elevate-25/docs/module-2/tabs-and-dashboard-switching"}}');var t=s(4848),i=s(8453);const r={},a="Extension Config",d={},l=[{value:"\ud83c\udfaf Goal",id:"-goal",level:2},{value:"\ud83d\udee0\ufe0f Instructions",id:"\ufe0f-instructions",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"extension-config",children:"Extension Config"})}),"\n",(0,t.jsx)(n.h2,{id:"-goal",children:"\ud83c\udfaf Goal"}),"\n",(0,t.jsx)(n.p,{children:"The Looker Extension API provides a set of methods for storing and retrieving configuration or state data that persists across user sessions. The most relevant methods for this are:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"getContextData"}),": Retrieves the current context data for the extension. This is typically used to load saved settings or configuration when the extension initializes."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"saveContextData"}),": Persists new or updated context data. This allows you to save user preferences or other stateful information."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"refreshContextData"}),": Forces the extension to reload the context data, ensuring the UI reflects the latest saved state."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"In this step, you\u2019ll use the Looker Extension SDK to save and load user-defined dashboard IDs. This allows your extension to persist configuration settings across sessions and provide a personalized experience."}),"\n",(0,t.jsx)(n.h2,{id:"\ufe0f-instructions",children:"\ud83d\udee0\ufe0f Instructions"}),"\n",(0,t.jsx)(n.p,{children:"To get started working on Module 2, run:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"git checkout module2-start --force`\n"})}),"\n",(0,t.jsx)(n.p,{children:"To jump to the end of this module in case you run out of time, run:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"git checkout module2-end --force\n"})}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Open the ",(0,t.jsx)(n.code,{children:"Settings.tsx"})," file"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Add the following code to the component to be used for getting and saving the dashboard ids:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"const Settings: React.FC = () => {\nconst open = useBoolean(false);\nconst extension_sdk = useExtensionSdk();\nconst config_data = extension_sdk.getContextData();\nconst [dashboard_ids, setDashboardIds] = useState<string[]>(\n    config_data?.[DASHBOARD_ID_KEY] || []\n);\n\nconst handleChange = async (values: string[]) => {\n    setDashboardIds(values);\n    await extension_sdk.saveContextData({\n    [DASHBOARD_ID_KEY]: values,\n    });\n    await extension_sdk.refreshContextData();\n};\n// rest of the code\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Make sure you import the constants file ",(0,t.jsx)(n.code,{children:'import { DASHBOARD_ID_KEY } from "./utils/constants";'})," as well as the useExtensionSdk hook ",(0,t.jsx)(n.code,{children:'import useExtensionSdk from "./hooks/useExtensionSdk";'})," and the useState hook ",(0,t.jsx)(n.code,{children:'import { useState } from "react";'})]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Now lets add an ",(0,t.jsx)(n.code,{children:"InputChips"})," component that displays and saves any ",(0,t.jsx)(n.code,{children:"dashboard_id"})," we put in the component."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'<DialogContent minHeight={"400px"}>\n    <Space>\n    <Label>Dashboard IDs for the tabs</Label>\n    <InputChips\n        placeholder="Dashboard IDs"\n        values={dashboard_ids}\n        onChange={handleChange}\n    />\n    </Space>\n</DialogContent>\n'})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Make sure to import ",(0,t.jsx)(n.code,{children:"Space"}),", ",(0,t.jsx)(n.code,{children:"label"}),", and ",(0,t.jsx)(n.code,{children:"InputChips"})," from @looker/components:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'import { Space, Label, InputChips } from "@looker/components";\n'})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Refresh your page and click the Settings button."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Enter in ",(0,t.jsx)(n.code,{children:"thelook_ecomm::business_pulse"})," and ",(0,t.jsx)(n.code,{children:"thelook_ecomm::brand_lookup"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Refresh the page and open the settings again, you should see these two values saved."}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.p,{children:"Learn more:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/simple-looker-extension-elevate-25/docs/module-2/glossary#extension-context-data",children:"\ud83d\udcd8 Extension Context Data"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/simple-looker-extension-elevate-25/docs/module-2/glossary#looker-components",children:"\ud83d\udcd8 Looker Components"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}}}]);